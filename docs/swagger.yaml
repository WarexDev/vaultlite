basePath: /api
host: localhost:8080
info:
  contact:
    email: benoit.fraysse@hotmail.com
    name: Benoit (WarexDev)
    url: https://github.com/WarexDev
  description: VaultLite is a lightweight secrets management API for secure storage
    and retrieval of secrets in cloud-native environments.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: https://github.com/WarexDev/vaultlite/blob/master/LICENSE
  title: VaultLite API
  version: "1.0"
paths:
  /health:
    get:
      description: Returns a simple OK status to verify the service is up and running
      produces:
      - application/json
      responses:
        "200":
          description: OK status
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Check the health status of the service
      tags:
      - health
  /login:
    post:
      description: Returns users infos on successful creation.
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Logging to an account to generate an api token
      tags:
      - auth
  /ping:
    get:
      description: Returns a simple pong status to verify the service is up and running
      produces:
      - application/json
      responses:
        "200":
          description: PONG status
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Ping the service
      tags:
      - health
  /refresh:
    post:
      description: Returns users infos on successful creation.
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Logging to an account to generate an api token
      tags:
      - auth
  /revoke:
    post:
      description: Revoke the current token.
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Revoke an existing token
      tags:
      - auth
  /users/me/secrets:
    get:
      description: Returns the list of available credentials.
      produces:
      - application/json
      responses:
        "200":
          description: OK status
          schema:
            type: string
      summary: Get a list of secret ids from user's private vault.
      tags:
      - Users/Secrets
    post:
      description: Create a new credential.
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Create a new secret into user's private vault.
      tags:
      - Users/Secrets
  /users/me/secrets/{key}:
    delete:
      description: Delete the value of an existing credential.
      produces:
      - application/json
      responses:
        "200":
          description: OK status
          schema:
            type: string
      summary: Delete an existing secret from user's private vault.
      tags:
      - Users/Secrets
    get:
      description: Returns the value for a credential.
      produces:
      - application/json
      responses:
        "200":
          description: OK status
          schema:
            type: string
      summary: Get a secret by key from user's private vault.
      tags:
      - Users/Secrets
    put:
      description: Update the value of an existing credential.
      produces:
      - application/json
      responses:
        "200":
          description: OK status
          schema:
            type: string
      summary: Update an existing secret from user's private vault.
      tags:
      - Users/Secrets
schemes:
- http
swagger: "2.0"
