// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "https://github.com/WarexDev/vaultlite/blob/master/LICENSE",
        "contact": {
            "name": "Benoit (WarexDev)",
            "url": "https://github.com/WarexDev",
            "email": "benoit.fraysse@hotmail.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/health": {
            "get": {
                "description": "Returns a simple OK status to verify the service is up and running",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Check the health status of the service",
                "responses": {
                    "200": {
                        "description": "OK status",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Returns users infos on successful creation.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Logging to an account to generate an api token",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/ping": {
            "get": {
                "description": "Returns a simple pong status to verify the service is up and running",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Ping the service",
                "responses": {
                    "200": {
                        "description": "PONG status",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/refresh": {
            "post": {
                "description": "Returns users infos on successful creation.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Logging to an account to generate an api token",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/revoke": {
            "post": {
                "description": "Revoke the current token.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Revoke an existing token",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/users/me/secrets": {
            "get": {
                "description": "Returns the list of available credentials.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users/Secrets"
                ],
                "summary": "Get a list of secret ids from user's private vault.",
                "responses": {
                    "200": {
                        "description": "OK status",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new credential.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users/Secrets"
                ],
                "summary": "Create a new secret into user's private vault.",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/users/me/secrets/{key}": {
            "get": {
                "description": "Returns the value for a credential.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users/Secrets"
                ],
                "summary": "Get a secret by key from user's private vault.",
                "responses": {
                    "200": {
                        "description": "OK status",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Update the value of an existing credential.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users/Secrets"
                ],
                "summary": "Update an existing secret from user's private vault.",
                "responses": {
                    "200": {
                        "description": "OK status",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete the value of an existing credential.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users/Secrets"
                ],
                "summary": "Delete an existing secret from user's private vault.",
                "responses": {
                    "200": {
                        "description": "OK status",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api",
	Schemes:          []string{"http"},
	Title:            "VaultLite API",
	Description:      "VaultLite is a lightweight secrets management API for secure storage and retrieval of secrets in cloud-native environments.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
